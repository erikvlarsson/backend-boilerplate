let UserModel,bcrypt;_24d‍.x([["default",()=>_24d‍.o]]);_24d‍.w("../models/User",[["default",["UserModel"],function(v){UserModel=v}]]);_24d‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);


const registerUser = async (req, res) => {
  const user = new UserModel({
    username: req.body.username,
    email: req.body.email,
    password: bcrypt.hashSync(req.body.password, 10),
  });

  try {
    const response = await user.save();
    res.status(201).send(response);
  } catch (error) {
    res.status(500).send({
      message: "Error while trying to create new user.",
      error: error.message,
    });
  }
};

const login = async (req, res) => {
  try {
    const user = await UserModel.findOne({ email: req.body.email });
    _24d‍.g.console.log(user);
    if (user) {
      const cmp = await bcrypt.compare(req.body.password, user.password);
      if (cmp) {
        //   ..... further code to maintain authentication like jwt or sessions
        res.send("Auth Successful");
      } else {
        res.send("Wrong username or password.");
      }
    } else {
      res.send("Wrong username or password.");
    }
  } catch (error) {
    _24d‍.g.console.log(error);
    res.status(500).send("Internal Server error Occured");
  }
};

const getAllUsers = async (req, res) => {
  try {
    const response = await UserModel.find();
    res.status(200).send(response);
  } catch (error) {
    res.status(500).send({
      error: `Error while trying to fetch users from database.`,
      message: error.message,
    });
  }
};

const getUserWithId = async (req, res) => {
  try {
    const response = await UserModel.findById(req.params.userId);
    res.status(200).send(response);
  } catch (error) {
    res.status(500).send({
      error: `Could not find user id.`,
      message: error.message,
    });
  }
};

_24d‍.d({ registerUser, getAllUsers, getUserWithId, authenticateUser });
