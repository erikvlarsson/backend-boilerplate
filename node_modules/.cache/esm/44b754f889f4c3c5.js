let authController,jwt;_89f‍.x([["default",()=>_89f‍.o]]);_89f‍.w("../controllers/AuthController.js",[["default",["authController"],function(v){authController=v}]]);_89f‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);


const setRoutes = (app) => {
  app.post(
    "/getRefreshToken",
    withToken,
    authenticateRefreshToken,
    authController.getRefreshToken
  );
  app.post(
    "/getAccessToken",
    withToken,
    authenticateRefreshToken,
    authController.getAccessToken
  );
  app.post("/login", authController.login);
  app.post("/signup", authController.signup);
  app.get("/clear-all-users", authController.clearUsers);
  app.get("/secret", withToken, authenticateAccessToken, authController.secret);
};

_89f‍.d({ setRoutes });

const authenticateAccessToken = (req, res, next) => {
  const decoded = jwt.verify(req.token, process.env.ACCESS_TOKEN_KEY);
  if (decoded) {
    req.user = decoded;
    next();
  } else {
    res.sendStatus(401);
  }
};

const authenticateRefreshToken = (req, res, next) => {
  const decoded = jwt.verify(req.token, process.env.REFRESH_TOKEN_KEY);
  if (decoded) {
    req.user = decoded;
    next();
  } else {
    res.sendStatus(401);
  }
};

const withToken = (req, res, next) => {
  const bearerHeader = req.headers["authorization"];
  const token = bearerHeader && bearerHeader.split(" ")[1];
  if (token) {
    req.token = token;
    next();
  } else {
    res.sendStatus(401);
  }
};
